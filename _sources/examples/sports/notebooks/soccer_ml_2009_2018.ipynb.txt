{"cells":[{"cell_type":"markdown","metadata":{},"source":["# Prediction of soccer outcome by combining rating and ML methods (2009/10 to 2017/18 EPL)"]},{"cell_type":"markdown","metadata":{},"source":["In this example, we assess the predictive performance of each rating system by combining it with ML classifier. The target class is the final outcome of soccer matches in the English Premier League (2009-2018 seasons). \n","The predictions are performed through Naive Bayes classifier of scikit-learn library and we apply the walk-forward procedure."]},{"cell_type":"markdown","metadata":{},"source":["Load packages"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["import apprate.ratings as ar\n","from apprate.app_sports.methods import (Predictions, prepare_sports_seasons,\n","                                        rating_norm_features)\n","from apprate.application import SoccerOutcome\n","from apprate.datasets.filenames import get_seasons_dict_footballdata_online\n","from apprate.datasets.parameters import championships, stats\n","from apprate.utils.enums import ratings\n","from sklearn.naive_bayes import GaussianNB"]},{"cell_type":"markdown","metadata":{},"source":["Set target outcome"]},{"cell_type":"code","execution_count":2,"metadata":{},"outputs":[],"source":["outcome = SoccerOutcome()"]},{"cell_type":"markdown","metadata":{},"source":["Get filenames from football-data.co.uk for seasons 2009-2018 (English Premier League)."]},{"cell_type":"code","execution_count":3,"metadata":{},"outputs":[],"source":["filenames_dict = get_seasons_dict_footballdata_online(\n","    season_start=2009, season_end=2018,\n","    championship=championships.PREMIERLEAGUE)"]},{"cell_type":"markdown","metadata":{},"source":["We create a list of rating methods and then we convert it to dictionary.\n","* For Massey a minimum limit of 20 games has been set to start the rating of teams. This number has been selected to provide enough games, and it ensures that the games graph is connected.\n","* For Markov the damping factor b was set to 0.85\n","* For ELO The choice of parameters is those suggested by FIFA, K=40, ks=400 without taking into account the home field advantage (HA=0)\n","* For WinLoss and Keener normalization is employed to produce fairer ratings since the teams may have a different number of games played (due to postponed or rescheduled matches).\n","* For OffenseDefense the tolerance number we have selected to be 0.0001"]},{"cell_type":"code","execution_count":4,"metadata":{},"outputs":[],"source":["ratings_list = [\n","    ar.Winloss(normalization=True),\n","    ar.Colley(),\n","    ar.Massey(data_limit=20),\n","    ar.Elo(version=ratings.ELOWIN, K=40, ks=400, HA=0,\n","           starting_point=0),\n","    ar.Elo(version=ratings.ELOPOINT, K=40, ks=400, HA=0,\n","           starting_point=0),\n","    ar.Keener(normalization=True),\n","    ar.OffenseDefense(tol=0.0001),\n","    ar.Markov(b=0.85, stats_markov_dict=stats.STATS_MARKOV_DICT),\n","    ar.AccuRate()\n","]"]},{"cell_type":"markdown","metadata":{},"source":["The ratings in the dataset start from the second match week."]},{"cell_type":"code","execution_count":5,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["Load season: 2009 - 2010\n","2.9%5.7%8.6%11.4%14.3%17.1%20.0%22.9%25.7%28.6%31.4%34.3%37.1%40.0%42.9%45.7%48.6%51.4%54.3%57.1%60.0%62.9%65.7%68.6%71.4%74.3%77.1%80.0%82.9%85.7%88.6%91.4%94.3%97.1%100.0%\n","Load season: 2010 - 2011\n","2.8%5.6%8.3%11.1%13.9%16.7%19.4%22.2%25.0%27.8%30.6%33.3%36.1%38.9%41.7%44.4%47.2%50.0%52.8%55.6%58.3%61.1%63.9%66.7%69.4%72.2%75.0%77.8%80.6%83.3%86.1%88.9%91.7%94.4%97.2%100.0%\n","Load season: 2011 - 2012\n","2.9%5.7%8.6%11.4%14.3%17.1%20.0%22.9%25.7%28.6%31.4%34.3%37.1%40.0%42.9%45.7%48.6%51.4%54.3%57.1%60.0%62.9%65.7%68.6%71.4%74.3%77.1%80.0%82.9%85.7%88.6%91.4%94.3%97.1%100.0%\n","Load season: 2012 - 2013\n","2.9%5.7%8.6%11.4%14.3%17.1%20.0%22.9%25.7%28.6%31.4%34.3%37.1%40.0%42.9%45.7%48.6%51.4%54.3%57.1%60.0%62.9%65.7%68.6%71.4%74.3%77.1%80.0%82.9%85.7%88.6%91.4%94.3%97.1%100.0%\n","Load season: 2013 - 2014\n","3.0%6.1%9.1%12.1%15.2%18.2%21.2%24.2%27.3%30.3%33.3%36.4%39.4%42.4%45.5%48.5%51.5%54.5%57.6%60.6%63.6%66.7%69.7%72.7%75.8%78.8%81.8%84.8%87.9%90.9%93.9%97.0%100.0%\n","Load season: 2014 - 2015\n","3.0%6.1%9.1%12.1%15.2%18.2%21.2%24.2%27.3%30.3%33.3%36.4%39.4%42.4%45.5%48.5%51.5%54.5%57.6%60.6%63.6%66.7%69.7%72.7%75.8%78.8%81.8%84.8%87.9%90.9%93.9%97.0%100.0%\n","Load season: 2015 - 2016\n","2.9%5.7%8.6%11.4%14.3%17.1%20.0%22.9%25.7%28.6%31.4%34.3%37.1%40.0%42.9%45.7%48.6%51.4%54.3%57.1%60.0%62.9%65.7%68.6%71.4%74.3%77.1%80.0%82.9%85.7%88.6%91.4%94.3%97.1%100.0%\n","Load season: 2016 - 2017\n","2.9%5.9%8.8%11.8%14.7%17.6%20.6%23.5%26.5%29.4%32.4%35.3%38.2%41.2%44.1%47.1%50.0%52.9%55.9%58.8%61.8%64.7%67.6%70.6%73.5%76.5%79.4%82.4%85.3%88.2%91.2%94.1%97.1%100.0%\n","Load season: 2017 - 2018\n","3.0%6.1%9.1%12.1%15.2%18.2%21.2%24.2%27.3%30.3%33.3%36.4%39.4%42.4%45.5%48.5%51.5%54.5%57.6%60.6%63.6%66.7%69.7%72.7%75.8%78.8%81.8%84.8%87.9%90.9%93.9%97.0%100.0%\n"]}],"source":["data = prepare_sports_seasons(filenames_dict,\n","                              outcome,\n","                              rating_systems=ratings_list,\n","                              start_week=2)"]},{"cell_type":"markdown","metadata":{},"source":["We will use the normalized ratings values as ml features, thus we create the feature list."]},{"cell_type":"code","execution_count":6,"metadata":{},"outputs":[{"data":{"text/plain":["[['HratingnormWinloss[normalization=True]',\n","  'AratingnormWinloss[normalization=True]'],\n"," ['HratingnormColley', 'AratingnormColley'],\n"," ['HratingnormMassey[data_limit=20]', 'AratingnormMassey[data_limit=20]'],\n"," ['HratingnormEloWin[HA=0_K=40_ks=400]',\n","  'AratingnormEloWin[HA=0_K=40_ks=400]'],\n"," ['HratingnormEloPoint[HA=0_K=40_ks=400]',\n","  'AratingnormEloPoint[HA=0_K=40_ks=400]'],\n"," ['HratingnormKeener[normalization=True]',\n","  'AratingnormKeener[normalization=True]'],\n"," ['HratingnormOffenseDefense[tol=0.0001]',\n","  'AratingnormOffenseDefense[tol=0.0001]'],\n"," ['HratingnormMarkov[b=0.85]', 'AratingnormMarkov[b=0.85]'],\n"," ['HratingnormAccuRATE', 'AratingnormAccuRATE']]"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["features_names_list = rating_norm_features(ratings_list)\n","features_names_list"]},{"cell_type":"markdown","metadata":{},"source":["We have selected the Naive Bayes classifier and we start making predictions from the 4th week.\n","We apply the anchored walk-farward procedure with window size = 1 which means that every week we make predictions\n","by using previous weeks data for training set. For example for the 4th week, the training set is consisted of the 1st, 2nd and 3rd week.\n","Note that every season we restart the walk-forward procedure. "]},{"cell_type":"code","execution_count":7,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","\n","=====Accuracy results=====\n","\n","                                                                                                        Accuracy  \\\n","GaussianNB()-[features: HratingnormWinloss[normalization=True] AratingnormWinloss[normalization=True]]  0.488875   \n","GaussianNB()-[features: HratingnormColley AratingnormColley]                                            0.490464   \n","GaussianNB()-[features: HratingnormMassey[data_limit=20] AratingnormMassey[data_limit=20]]              0.494473   \n","GaussianNB()-[features: HratingnormEloWin[HA=0_K=40_ks=400] AratingnormEloWin[HA=0_K=40_ks=400]]        0.489193   \n","GaussianNB()-[features: HratingnormEloPoint[HA=0_K=40_ks=400] AratingnormEloPoint[HA=0_K=40_ks=400]]    0.492689   \n","GaussianNB()-[features: HratingnormKeener[normalization=True] AratingnormKeener[normalization=True]]    0.498093   \n","GaussianNB()-[features: HratingnormOffenseDefense[tol=0.0001] AratingnormOffenseDefense[tol=0.0001]]    0.475207   \n","GaussianNB()-[features: HratingnormMarkov[b=0.85] AratingnormMarkov[b=0.85]]                            0.496503   \n","GaussianNB()-[features: HratingnormAccuRATE AratingnormAccuRATE]                                        0.490146   \n","\n","                                                                                                        Correct Games  \\\n","GaussianNB()-[features: HratingnormWinloss[normalization=True] AratingnormWinloss[normalization=True]]           1538   \n","GaussianNB()-[features: HratingnormColley AratingnormColley]                                                     1543   \n","GaussianNB()-[features: HratingnormMassey[data_limit=20] AratingnormMassey[data_limit=20]]                       1521   \n","GaussianNB()-[features: HratingnormEloWin[HA=0_K=40_ks=400] AratingnormEloWin[HA=0_K=40_ks=400]]                 1539   \n","GaussianNB()-[features: HratingnormEloPoint[HA=0_K=40_ks=400] AratingnormEloPoint[HA=0_K=40_ks=400]]             1550   \n","GaussianNB()-[features: HratingnormKeener[normalization=True] AratingnormKeener[normalization=True]]             1567   \n","GaussianNB()-[features: HratingnormOffenseDefense[tol=0.0001] AratingnormOffenseDefense[tol=0.0001]]             1495   \n","GaussianNB()-[features: HratingnormMarkov[b=0.85] AratingnormMarkov[b=0.85]]                                     1562   \n","GaussianNB()-[features: HratingnormAccuRATE AratingnormAccuRATE]                                                 1542   \n","\n","                                                                                                        Wrong Games  \\\n","GaussianNB()-[features: HratingnormWinloss[normalization=True] AratingnormWinloss[normalization=True]]         1608   \n","GaussianNB()-[features: HratingnormColley AratingnormColley]                                                   1603   \n","GaussianNB()-[features: HratingnormMassey[data_limit=20] AratingnormMassey[data_limit=20]]                     1555   \n","GaussianNB()-[features: HratingnormEloWin[HA=0_K=40_ks=400] AratingnormEloWin[HA=0_K=40_ks=400]]               1607   \n","GaussianNB()-[features: HratingnormEloPoint[HA=0_K=40_ks=400] AratingnormEloPoint[HA=0_K=40_ks=400]]           1596   \n","GaussianNB()-[features: HratingnormKeener[normalization=True] AratingnormKeener[normalization=True]]           1579   \n","GaussianNB()-[features: HratingnormOffenseDefense[tol=0.0001] AratingnormOffenseDefense[tol=0.0001]]           1651   \n","GaussianNB()-[features: HratingnormMarkov[b=0.85] AratingnormMarkov[b=0.85]]                                   1584   \n","GaussianNB()-[features: HratingnormAccuRATE AratingnormAccuRATE]                                               1604   \n","\n","                                                                                                        Total Games  \n","GaussianNB()-[features: HratingnormWinloss[normalization=True] AratingnormWinloss[normalization=True]]         3146  \n","GaussianNB()-[features: HratingnormColley AratingnormColley]                                                   3146  \n","GaussianNB()-[features: HratingnormMassey[data_limit=20] AratingnormMassey[data_limit=20]]                     3076  \n","GaussianNB()-[features: HratingnormEloWin[HA=0_K=40_ks=400] AratingnormEloWin[HA=0_K=40_ks=400]]               3146  \n","GaussianNB()-[features: HratingnormEloPoint[HA=0_K=40_ks=400] AratingnormEloPoint[HA=0_K=40_ks=400]]           3146  \n","GaussianNB()-[features: HratingnormKeener[normalization=True] AratingnormKeener[normalization=True]]           3146  \n","GaussianNB()-[features: HratingnormOffenseDefense[tol=0.0001] AratingnormOffenseDefense[tol=0.0001]]           3146  \n","GaussianNB()-[features: HratingnormMarkov[b=0.85] AratingnormMarkov[b=0.85]]                                   3146  \n","GaussianNB()-[features: HratingnormAccuRATE AratingnormAccuRATE]                                               3146  \n"]}],"source":["results = Predictions(data, outcome, start_from_week=4).ml_pred_parallel(\n","    clf_list=[GaussianNB()], features_names_list=features_names_list)"]}],"metadata":{"kernelspec":{"display_name":"Python 3.8.13 ('py38')","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"},"orig_nbformat":4,"vscode":{"interpreter":{"hash":"23ceb7112fbf9d0e38ecbf60d6e6d5e2dcebcc82200eeb1e5a5d5f9ffb9e27ca"}}},"nbformat":4,"nbformat_minor":2}
