{"cells":[{"cell_type":"markdown","metadata":{},"source":["# Prediction of soccer outcome (2009-2010 EPL) by combining game statistics and rating values"]},{"cell_type":"markdown","metadata":{},"source":["In this example we use rating values from \"Colley method\" as machine learning features. Additionally, we consider two teams statistics as features: the Total Goals and Total Shots on Target.\n","The dataset is composed of soccer matches of the English Premier League (season 2009-2010).\n","The predictions are performed through Naive Bayes classifier of scikit-learn library in order to predict soccer outcome and we apply the walk-forward procedure."]},{"cell_type":"markdown","metadata":{},"source":["Load packages"]},{"cell_type":"code","execution_count":1,"metadata":{},"outputs":[],"source":["from apprate.app_sports.methods import Predictions, prepare_sports_seasons\n","from apprate.application import SoccerOutcome\n","from apprate.datasets.filenames import datasets_sports_seasons_path\n","from apprate.ratings.colley import Colley\n","from sklearn.naive_bayes import GaussianNB"]},{"cell_type":"markdown","metadata":{},"source":["Set target outcome"]},{"cell_type":"code","execution_count":2,"metadata":{},"outputs":[],"source":["outcome = SoccerOutcome()"]},{"cell_type":"markdown","metadata":{},"source":["Get filename path for season 2009-2010 in English Premier League.\n","Then, we create Colley rating system instance and we add it to a dictionary, Then, we define the statistics. Finally, we prepare the dataset.\n","The ratings in the dataset start from the second match-week."]},{"cell_type":"code","execution_count":3,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["Load season: 2009 - 2010\n","2.9%5.7%8.6%11.4%14.3%17.1%20.0%22.9%25.7%28.6%31.4%34.3%37.1%40.0%42.9%45.7%48.6%51.4%54.3%57.1%60.0%62.9%65.7%68.6%71.4%74.3%77.1%80.0%82.9%85.7%88.6%91.4%94.3%97.1%100.0%\n"]}],"source":["filenames_dict = datasets_sports_seasons_path(2009, championship='EPL')\n","ratings_dict = {'Colley': Colley()}\n","stats_attributes = {\n","    'TG': {'ITEM_I': 'FTHG', 'ITEM_J': 'FTAG', 'TYPE': 'POINTS'},\n","    'TST': {'ITEM_I': 'HST', 'ITEM_J': 'AST', 'TYPE': 'POINTS'},\n","}\n","data_ml = prepare_sports_seasons(filenames_dict,\n","                                 outcome,\n","                                 rating_systems=ratings_dict,\n","                                 stats_attributes=stats_attributes,\n","                                 start_week=2)"]},{"cell_type":"markdown","metadata":{},"source":["We show the columns of 2009 season dataframe"]},{"cell_type":"code","execution_count":4,"metadata":{},"outputs":[{"data":{"text/plain":["Index(['Div', 'Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG', 'FTR', 'HTHG',\n","       'HTAG', 'HTR', 'Referee', 'HS', 'AS', 'HST', 'AST', 'HF', 'AF', 'HC',\n","       'AC', 'HY', 'AY', 'HR', 'AR', 'B365H', 'B365D', 'B365A', 'BWH', 'BWD',\n","       'BWA', 'GBH', 'GBD', 'GBA', 'IWH', 'IWD', 'IWA', 'LBH', 'LBD', 'LBA',\n","       'SBH', 'SBD', 'SBA', 'WHH', 'WHD', 'WHA', 'SJH', 'SJD', 'SJA', 'VCH',\n","       'VCD', 'VCA', 'BSH', 'BSD', 'BSA', 'Bb1X2', 'BbMxH', 'BbAvH', 'BbMxD',\n","       'BbAvD', 'BbMxA', 'BbAvA', 'BbOU', 'BbMx>2.5', 'BbAv>2.5', 'BbMx<2.5',\n","       'BbAv<2.5', 'BbAH', 'BbAHh', 'BbMxAHH', 'BbAvAHH', 'BbMxAHA', 'BbAvAHA',\n","       'Period', 'Week_Number', 'FT', 'HColley', 'AColley',\n","       'HratingnormColley', 'AratingnormColley', 'HTG', 'ATG', 'HTST', 'ATST'],\n","      dtype='object')"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["data_ml[2009].columns"]},{"cell_type":"markdown","metadata":{},"source":["We will use the normalized ratings from Colley method and the team statistics: total goals and total shots on target as features for ml classifier."]},{"cell_type":"code","execution_count":5,"metadata":{},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>HratingnormColley</th>\n","      <th>AratingnormColley</th>\n","      <th>HTG</th>\n","      <th>ATG</th>\n","      <th>HTST</th>\n","      <th>ATST</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.777294</td>\n","      <td>0.000000</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>9.0</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.377459</td>\n","      <td>0.546966</td>\n","      <td>0.5</td>\n","      <td>1.0</td>\n","      <td>4.5</td>\n","      <td>4.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.226129</td>\n","      <td>0.174768</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.777294</td>\n","      <td>0.589776</td>\n","      <td>2.0</td>\n","      <td>0.5</td>\n","      <td>5.0</td>\n","      <td>7.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.544873</td>\n","      <td>0.252242</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>8.0</td>\n","      <td>9.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   HratingnormColley  AratingnormColley  HTG  ATG  HTST  ATST\n","0           0.777294           0.000000  6.0  0.0   9.0   4.0\n","1           0.377459           0.546966  0.5  1.0   4.5   4.0\n","2           0.226129           0.174768  1.0  0.0   5.0   3.0\n","3           0.777294           0.589776  2.0  0.5   5.0   7.0\n","4           0.544873           0.252242  1.0  0.0   8.0   9.0"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["features_names = ['HratingnormColley',\n","                  'AratingnormColley',\n","                  'HTG', 'ATG', 'HTST', 'ATST']\n","data_ml[2009][features_names].head()"]},{"cell_type":"markdown","metadata":{},"source":["We have selected the Naive Bayes classifier and we start making predictions from the 4th week.\n","We apply the anchored walk-farward procedure with window size = 1 which means that every week we make predictions\n","by using previous weeks data for training set. For example for the 4th week, the training set is consisted of the 1st, 2nd and 3rd week. "]},{"cell_type":"code","execution_count":6,"metadata":{},"outputs":[{"name":"stdout","output_type":"stream","text":["\n","\n","=====GaussianNB()-[features: HratingnormColley AratingnormColley HTG ATG HTST ATST]=====\n","              precision    recall  f1-score   support\n","\n","         1.0     0.6815    0.5257    0.5935       175\n","         2.0     0.4062    0.3421    0.3714        76\n","         3.0     0.3448    0.5376    0.4202        93\n","\n","    accuracy                         0.4884       344\n","   macro avg     0.4775    0.4685    0.4617       344\n","weighted avg     0.5297    0.4884    0.4976       344\n","\n","confusion matrix:\n","[[92 21 62]\n","  [17 26 33]\n","  [26 17 50]]\n","Correct games: 168\n","Wrong games: 176\n","Total predicted Games: 344\n","\n","\n","\n","=====GaussianNB()-[features: HratingnormColley AratingnormColley HTG ATG HTST ATST]=====\n","\n","\n","=====Accuracy results=====\n","\n","                                                                                Accuracy  \\\n","GaussianNB()-[features: HratingnormColley AratingnormColley HTG ATG HTST ATST]  0.488372   \n","\n","                                                                                Correct Games  \\\n","GaussianNB()-[features: HratingnormColley AratingnormColley HTG ATG HTST ATST]            168   \n","\n","                                                                                Wrong Games  \\\n","GaussianNB()-[features: HratingnormColley AratingnormColley HTG ATG HTST ATST]          176   \n","\n","                                                                                Total Games  \n","GaussianNB()-[features: HratingnormColley AratingnormColley HTG ATG HTST ATST]          344  \n"]}],"source":["test_y, pred = Predictions(data_ml,\n","                           outcome,\n","                           start_from_week=4,\n","                           print_classification_report=True).ml_pred(\n","                            clf=GaussianNB(),\n","                            features_names=features_names)"]}],"metadata":{"kernelspec":{"display_name":"Python 3.8.13 ('py38')","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"},"orig_nbformat":4,"vscode":{"interpreter":{"hash":"23ceb7112fbf9d0e38ecbf60d6e6d5e2dcebcc82200eeb1e5a5d5f9ffb9e27ca"}}},"nbformat":4,"nbformat_minor":2}
